(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=t.call(e,a)}catch(e){u=[6,e],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function i(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function a(e){return this instanceof a?(this.v=e,this):new a(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var u=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function c(e){return"function"==typeof e}function l(e){return c(null==e?void 0:e.then)}function s(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var d=s((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function p(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,t,n,a,u;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var s=r(l),p=s.next();!p.done;p=s.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else l.remove(this);var f=this.initialTeardown;if(c(f))try{f()}catch(e){u=e instanceof d?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=r(h),b=v.next();!b.done;b=v.next()){var y=b.value;try{m(y)}catch(e){u=null!=u?u:[],e instanceof d?u=i(i([],o(u)),o(e.errors)):u.push(e)}}}catch(e){n={error:e}}finally{try{b&&!b.done&&(a=v.return)&&a.call(v)}finally{if(n)throw n.error}}}if(u)throw new d(u)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)m(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&p(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&p(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),h=f.EMPTY;function v(e){return e instanceof f||e&&"closed"in e&&c(e.remove)&&c(e.add)&&c(e.unsubscribe)}function m(e){c(e)?e():e.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},y={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=y.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,i([e,t],o(n))):setTimeout.apply(void 0,i([e,t],o(n)))},clearTimeout:function(e){var t=y.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function g(e){y.setTimeout((function(){var t=b.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var S=E("C",void 0,void 0);function E(e,t,n){return{kind:e,value:t,error:n}}var L=null;function C(e){if(b.useDeprecatedSynchronousErrorHandling){var t=!L;if(t&&(L={errorThrown:!1,error:null}),e(),t){var n=L,r=n.errorThrown,o=n.error;if(L=null,r)throw o}}else e()}var x=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,v(t)&&t.add(n)):n.destination=P,n}return t(n,e),n.create=function(e,t,n){return new _(e,t,n)},n.prototype.next=function(e){this.isStopped?q(function(e){return E("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?q(E("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?q(S,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(f),T=Function.prototype.bind;function j(e,t){return T.call(e,t)}var O=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){I(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){I(e)}else I(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){I(e)}},e}(),_=function(e){function n(t,n,r){var o,i,a=e.call(this)||this;return c(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&b.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},o={next:t.next&&j(t.next,i),error:t.error&&j(t.error,i),complete:t.complete&&j(t.complete,i)}):o=t,a.destination=new O(o),a}return t(n,e),n}(x);function I(e){var t;b.useDeprecatedSynchronousErrorHandling?(t=e,b.useDeprecatedSynchronousErrorHandling&&L&&(L.errorThrown=!0,L.error=t)):g(e)}function q(e,t){var n=b.onStoppedNotification;n&&y.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:w,error:function(e){throw e},complete:w},k="function"==typeof Symbol&&Symbol.observable||"@@observable";function A(e){return e}var M=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof x||function(e){return e&&c(e.next)&&c(e.error)&&c(e.complete)}(r)&&v(r)?e:new _(e,t,n);return C((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=H(t))((function(t,r){var o=new _({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[k]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?A:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=H(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function H(e){var t;return null!==(t=null!=e?e:b.Promise)&&void 0!==t?t:Promise}function N(e){return c(e[k])}function J(e){return Symbol.asyncIterator&&c(null==e?void 0:e[Symbol.asyncIterator])}function D(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var U="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function R(e){return c(null==e?void 0:e[U])}function z(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof a?Promise.resolve(n.value.v).then(l,s):d(i[0][2],n)}catch(e){d(i[0][3],e)}var n}function l(e){c("next",e)}function s(e){c("throw",e)}function d(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,a(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,a(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function B(e){return c(null==e?void 0:e.getReader)}function F(e){if(e instanceof M)return e;if(null!=e){if(N(e))return i=e,new M((function(e){var t=i[k]();if(c(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(u(e))return o=e,new M((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(l(e))return n=e,new M((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,g)}));if(J(e))return G(e);if(R(e))return t=e,new M((function(e){var n,o;try{for(var i=r(t),a=i.next();!a.done;a=i.next()){var u=a.value;if(e.next(u),e.closed)return}}catch(e){n={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(B(e))return G(z(e))}var t,n,o,i;throw D(e)}function G(e){return new M((function(t){(function(e,t){var o,i,a,u,c,l,s,d;return c=this,l=void 0,d=function(){var c,l;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(c=i.value,t.next(c),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=n.sent(),a={error:l},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{o(d.next(e))}catch(e){t(e)}}function r(e){try{o(d.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof s?o:new s((function(e){e(o)}))).then(n,r)}o((d=d.apply(c,l||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function V(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function Y(e){return function(t){if(function(e){return c(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function K(e,t,n,r,o){return new Q(e,t,n,r,o)}var Q=function(e){function n(t,n,r,o,i,a){var u=e.call(this,t)||this;return u.onFinalize=i,u.shouldUnsubscribe=a,u._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,u._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(x);function W(e,t){return void 0===t&&(t=0),Y((function(n,r){n.subscribe(K(r,(function(n){return V(r,e,(function(){return r.next(n)}),t)}),(function(){return V(r,e,(function(){return r.complete()}),t)}),(function(n){return V(r,e,(function(){return r.error(n)}),t)})))}))}function X(e,t){return void 0===t&&(t=0),Y((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function Z(e,t){if(!e)throw new Error("Iterable cannot be null");return new M((function(n){V(n,t,(function(){var r=e[Symbol.asyncIterator]();V(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function $(e,t){return t?function(e,t){if(null!=e){if(N(e))return function(e,t){return F(e).pipe(X(t),W(t))}(e,t);if(u(e))return function(e,t){return new M((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(l(e))return function(e,t){return F(e).pipe(X(t),W(t))}(e,t);if(J(e))return Z(e,t);if(R(e))return function(e,t){return new M((function(n){var r;return V(n,t,(function(){r=e[U](),V(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return c(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(B(e))return function(e,t){return Z(z(e),t)}(e,t)}throw D(e)}(e,t):F(e)}var ee="http://127.0.0.1:6500/users",te="http://127.0.0.1:6500/objava",ne="http://127.0.0.1:6500/like",re="http://127.0.0.1:6500/dislike",oe=s((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),ie=function(e){function n(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(n,e),n.prototype.lift=function(e){var t=new ae(this,this);return t.operator=e,t},n.prototype._throwIfClosed=function(){if(this.closed)throw new oe},n.prototype.next=function(e){var t=this;C((function(){var n,o;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=r(t.currentObservers),a=i.next();!a.done;a=i.next())a.value.next(e)}catch(e){n={error:e}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(e){var t=this;C((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},n.prototype.complete=function(){var e=this;C((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},n.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},n.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?h:(this.currentObservers=null,i.push(e),new f((function(){t.currentObservers=null,p(i,e)})))},n.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},n.prototype.asObservable=function(){var e=new M;return e.source=this,e},n.create=function(e,t){return new ae(e,t)},n}(M),ae=function(e){function n(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return t(n,e),n.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},n.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},n.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},n.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:h},n}(ie);function ue(e,t){return Y((function(n,r){var o=0;n.subscribe(K(r,(function(n){r.next(e.call(t,n,o++))})))}))}function ce(e,t,n){return void 0===n&&(n=1/0),c(t)?ce((function(n,r){return ue((function(e,o){return t(n,e,r,o)}))(F(e(n,r)))}),n):("number"==typeof t&&(n=t),Y((function(t,r){return function(e,t,n,r,o,i,a,u){var c=[],l=0,s=0,d=!1,p=function(){!d||c.length||l||t.complete()},f=function(e){return l<r?h(e):c.push(e)},h=function(e){l++;var o=!1;F(n(e,s++)).subscribe(K(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{l--;for(;c.length&&l<r;)e=void 0,e=c.shift(),h(e);p()}catch(e){t.error(e)}var e})))};return e.subscribe(K(t,f,(function(){d=!0,p()}))),function(){}}(t,r,e,n)})))}var le=Array.isArray;function se(e){return ue((function(t){return function(e,t){return le(t)?e.apply(void 0,i([],o(t))):e(t)}(e,t)}))}var de=["addListener","removeListener"],pe=["addEventListener","removeEventListener"],fe=["on","off"];function he(e,t,n,r){if(c(n)&&(r=n,n=void 0),r)return he(e,t,n).pipe(se(r));var i=o(function(e){return c(e.addEventListener)&&c(e.removeEventListener)}(e)?pe.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return c(e.addListener)&&c(e.removeListener)}(e)?de.map(ve(e,t)):function(e){return c(e.on)&&c(e.off)}(e)?fe.map(ve(e,t)):[],2),a=i[0],l=i[1];if(!a&&u(e))return ce((function(e){return he(e,t,n)}))(F(e));if(!a)throw new TypeError("Invalid event target");return new M((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return a(t),function(){return l(t)}}))}function ve(e,t){return function(n){return function(r){return e[n](t,r)}}}function me(e,t){return Y((function(n,r){var o=null,i=0,a=!1,u=function(){return a&&!o&&r.complete()};n.subscribe(K(r,(function(n){null==o||o.unsubscribe();var a=0,c=i++;F(e(n,c)).subscribe(o=K(r,(function(e){return r.next(t?t(n,e,c,a++):e)}),(function(){o=null,u()})))}),(function(){a=!0,u()})))}))}var be=function(){this.name=null,this.text=null,this.picture=null,this.tags=null,this.likes=null,this.author=null};function ye(e,t){null!==t&&t.forEach((function(t){e.removeChild(t)}))}function ge(e){return he(document.querySelector("#objavaImg"),"input").pipe(ue((function(e){return console.log(e.target.files[0]),e.target.files[0]})),me((function(e){return function(e,t){var n=new FileReader;return n.readAsDataURL(e),he(n,"load").pipe(ue((function(e){console.log("Image radi");var t,n=e.target.result;return t=n,document.querySelector("img").src=t,n})))}(e)})))}var we=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(f),Se={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=Se.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,i([e,t],o(n))):setInterval.apply(void 0,i([e,t],o(n)))},clearInterval:function(e){var t=Se.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},Ee=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(o,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),Se.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&Se.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(we),Le={now:function(){return(Le.delegate||Date).now()},delegate:void 0},Ce=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=Le.now,e}(),xe=new(function(e){function n(t,n){void 0===n&&(n=Ce.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(Ce))(Ee),Te=xe;function je(e,t){return void 0===t&&(t=xe),Y((function(n,r){var o=null,i=null,a=null,u=function(){if(o){o.unsubscribe(),o=null;var e=i;i=null,r.next(e)}};function c(){var n=a+e,i=t.now();if(i<n)return o=this.schedule(void 0,n-i),void r.add(o);u()}n.subscribe(K(r,(function(n){i=n,a=t.now(),o||(o=t.schedule(c,e),r.add(o))}),(function(){u(),r.complete()}),void 0,(function(){i=o=null})))}))}var Oe=Array.isArray,_e=Object.getPrototypeOf,Ie=Object.prototype,qe=Object.keys;function Pe(e){return e&&c(e.schedule)}function ke(e){return e[e.length-1]}function Ae(e){return Pe(ke(e))?e.pop():void 0}function Me(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ae(e),r=function(e){return c(ke(e))?e.pop():void 0}(e),o=function(e){if(1===e.length){var t=e[0];if(Oe(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&_e(r)===Ie){var n=qe(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var r;return{args:e,keys:null}}(e),i=o.args,a=o.keys;if(0===i.length)return $([],n);var u=new M(function(e,t,n){return void 0===n&&(n=A),function(r){He(t,(function(){for(var o=e.length,i=new Array(o),a=o,u=o,c=function(o){He(t,(function(){var c=$(e[o],t),l=!1;c.subscribe(K(r,(function(e){i[o]=e,l||(l=!0,u--),u||r.next(n(i.slice()))}),(function(){--a||r.complete()})))}),r)},l=0;l<o;l++)c(l)}),r)}}(i,n,a?function(e){return function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}(a,e)}:A));return r?u.pipe(se(r)):u}function He(e,t,n){e?V(n,e,t):t()}var Ne=new M((function(e){return e.complete()}));function Je(e){return e<=0?function(){return Ne}:Y((function(t,n){var r=0;t.subscribe(K(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}function De(e,t){return t?function(n){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(void 0===(n=1)&&(n=1/0),ce(A,n))($(e,Ae(e)));var n}(t.pipe(Je(1),Y((function(e,t){e.subscribe(K(t,w))}))),n.pipe(De(e)))}:ce((function(t,n){return F(e(t,n)).pipe(Je(1),function(e){return ue((function(){return e}))}(t))}))}var Ue=function(){this.name=null,this.lastname=null,this.email=null,this.password=null,this.content=[],this.tags=[]};function Re(){var e=new Ue,t=he(document.querySelector("#userPass"),"input").pipe(je(200),ue((function(e){return e.target.value})));Me([he(document.querySelector("#userEmail"),"input").pipe(je(200),ue((function(e){return e.target.value}))),t]).subscribe((function(t){e.email=t[0],e.password=t[1]})),he(document.querySelector("#btnLogin"),"click").pipe(me((function(){return t=e.email,n=e.password,$(fetch(ee+"?email="+t+"&password="+n,{method:"GET"}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})));var t,n})),function(e,t){void 0===t&&(t=xe);var n=function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=Te);var r=-1;return null!=t&&(Pe(t)?n=t:r=t),new M((function(t){var o,i=(o=e)instanceof Date&&!isNaN(o)?+e-n.now():e;i<0&&(i=0);var a=0;return n.schedule((function(){t.closed||(t.next(a++),0<=r?this.schedule(void 0,r):t.complete())}),i)}))}(500,t);return De((function(){return n}))}()).subscribe((function(e){e.valid?(sessionStorage.setItem("current-user",JSON.stringify(e.data)),document.location.reload()):alert("Niste uneli ispravne podatke")}))}function ze(e,t,n,r,o){void 0===o&&(o=null);var i=document.createElement("a");i.href=t,i.classList.add(n),i.innerHTML=r;var a=document.querySelector(e);null!==i&&null!==a&&a.appendChild(i)}function Be(e,t){var n=document.querySelector("a[href='"+t+"']"),r=document.querySelector(e);null!==n&&null!==r&&r.removeChild(n)}function Fe(){var e=JSON.parse(sessionStorage.getItem("current-user"));null!==e?(ze(".header","#profil","header-item","PROFIL"),ze(".header","#odjavi-se","header-item","ODJAVI SE"),ze(".header","#post-objava","header-item","NOVA OBJAVA"),Be(".header","#prijavi-se"),Be(".header","#kreiraj-nalog")):(ze(".header","#prijavi-se","header-item","PRIJAVI SE"),ze(".header","#kreiraj-nalog","header-item","KREIRAJ NALOG"),Be(".header","#profil"),Be(".header","#post-objava"),Be(".header","#odjavi-se"));var t=document.querySelector("a[href='#kreiraj-nalog']");new ie,null!==t&&t.addEventListener("click",(function(){var e;ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var t=document.createElement("div");t.classList.add("divSignup"),function(e){var t=document.createElement("div");t.classList.add("divSignupLabels");var n=document.createElement("label");n.innerHTML="Ime:",t.appendChild(n);var r=document.createElement("label");r.innerHTML="Prezime:",t.appendChild(r);var o=document.createElement("label");o.innerHTML="E-mail:",t.appendChild(o);var i=document.createElement("label");i.innerHTML="Lozinka:",t.appendChild(i),e.appendChild(t);var a=document.createElement("div");a.classList.add("divSignupInput");var u=document.createElement("input");u.id="signup-name",u.type="name",a.appendChild(u);var c=document.createElement("input");c.id="signup-lastname",c.type="name",a.appendChild(c);var l=document.createElement("input");l.id="signup-email",l.type="email",a.appendChild(l);var s=document.createElement("input");s.id="signup-password",s.type="password",a.appendChild(s),e.appendChild(a)}(t),e.appendChild(t);var n=document.createElement("div");n.classList.add("divSignupButton");var r=document.createElement("button");r.classList.add("signupButton"),r.innerHTML="Kreiraj",n.appendChild(r),e.appendChild(n)}(document.querySelector(".middle")),e=new Ue,document.querySelector(".signupButton").addEventListener("click",(function(){e.name=document.querySelector("#signup-name").value,e.lastname=document.querySelector("#signup-lastname").value,e.email=document.querySelector("#signup-email").value,e.password=document.querySelector("#signup-password").value,""===e.name||""===e.lastname||""===e.email||""===e.password?alert("Morate da unesete sva polja..."):function(e){var t=new URLSearchParams;return t.append("name",e.name),t.append("lastname",e.lastname),t.append("email",e.email),t.append("password",e.password),t.append("content",JSON.stringify(e.content)),t.append("tags",JSON.stringify(e.tags)),$(fetch(ee,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))}(e).subscribe((function(t){console.log(t),t.valid?(sessionStorage.setItem("current-user",JSON.stringify(e)),alert(t.message),document.location.reload()):alert(t.message)}))}))}));var n=document.querySelector("a[href='#prijavi-se']");new ie,null!==n&&n.addEventListener("click",(function(){ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var t=document.createElement("div");t.classList.add("divLogin");var n=document.createElement("div");n.classList.add("divLoginLabels");var r=document.createElement("label");r.innerHTML="E-mail:",n.appendChild(r);var o=document.createElement("label");o.innerHTML="Password:",n.appendChild(o),t.appendChild(n);var i=document.createElement("div");i.classList.add("divLoginInput");var a=document.createElement("input");a.id="userEmail",a.type="email",i.appendChild(a);var u=document.createElement("input");u.id="userPass",u.type="password",i.appendChild(u),t.appendChild(i),e.appendChild(t);var c=document.createElement("div");c.classList.add("divLoginButton");var l=document.createElement("button");l.id="btnLogin",l.innerHTML="Uloguj se",c.appendChild(l),e.appendChild(c)}(document.querySelector(".middle")),Re()}));var r=document.querySelector("a[href='#odjavi-se']");null!==r&&r.addEventListener("click",(function(){ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),sessionStorage.removeItem("current-user"),document.location.reload()}));var o=document.querySelector("a[href='#profil']");null!==o&&(o.onclick=function(){var t;ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e,t){var n=document.createElement("div");n.classList.add("divUserProfileInfoData");var r=document.createElement("div"),o=document.createElement("label");o.classList.add("main-label"),o.innerHTML="Ime: ",r.appendChild(o);var i=document.createElement("div");i.innerHTML=t.name+" "+t.lastname,r.appendChild(i),n.appendChild(r);var a=document.createElement("div"),u=document.createElement("label");u.classList.add("main-label"),u.innerHTML="Email: ",a.appendChild(u);var c=document.createElement("div");c.innerHTML=t.email,a.appendChild(c),n.appendChild(a),e.appendChild(n)}(document.querySelector(".middle"),e),(t=JSON.parse(sessionStorage.getItem("current-user")).email,$(fetch(te+"?email="+t,{method:"GET"}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))).subscribe((function(e){e.valid?function(e,t){var n=document.createElement("div");n.classList.add("divObjavaPocetna");var r=document.createElement("h2");r.innerHTML="Vase objave.",r.classList.add("userObjaveNaslov"),n.appendChild(r),t.forEach((function(e){Ve(n,e)})),e.appendChild(n)}(document.querySelector(".middle"),e.data):alert(e.message)}))});var i=document.querySelector("a[href='#post-objava']");null!==i&&i.addEventListener("click",(function(){var e;ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var t=document.createElement("div");t.classList.add("divPostObjava");var n=document.createElement("div");n.classList.add("divPostObjavaInput");var r=document.createElement("div");r.classList.add("divName");var o=document.createElement("label");o.innerHTML="Name: ",r.appendChild(o);var i=document.createElement("input");i.type="name",i.id="objavaName",r.appendChild(i),n.appendChild(r);var a=document.createElement("div");a.classList.add("divText");var u=document.createElement("label");u.innerHTML="Text: ",a.appendChild(u);var c=document.createElement("textarea");c.id="objavaText",c.cols=30,c.rows=15,a.appendChild(c),n.appendChild(a);var l=document.createElement("div");l.classList.add("divPicture");var s=document.createElement("label");s.innerHTML="Picture: ",l.appendChild(s);var d=document.createElement("input");d.id="objavaImg",d.type="file",l.appendChild(d),n.appendChild(l);var p=document.createElement("div");p.classList.add("divTags");var f=document.createElement("label");f.innerHTML="Tagovi(uneti odvojene iskljucivo zapetom): ",p.appendChild(f);var h=document.createElement("input");h.id="objavaTags",h.type="name",p.appendChild(h),n.appendChild(p),t.appendChild(n);var v=document.createElement("div");v.classList.add("divPostObjavaImg");var m=document.createElement("img");m.width=100,m.height=100,v.appendChild(m),t.appendChild(v);var b=document.createElement("div");b.classList.add("divPostObjavaButton");var y=document.createElement("button");y.classList.add("postObjavaButton"),y.innerHTML="Dodaj",b.appendChild(y),t.appendChild(b),e.appendChild(t)}(document.querySelector(".middle")),e=new be,ge(new ie).subscribe((function(t){e.picture=t})),document.querySelector(".postObjavaButton").addEventListener("click",(function(){e.name=document.querySelector("#objavaName").value,e.text=document.querySelector("#objavaText").value,e.tags=document.querySelector("#objavaTags").value.split(","),e.author=JSON.parse(sessionStorage.getItem("current-user")),console.log(e),""===e.name||""===e.text||0===e.tags.length||""===e.picture?alert("Morate da unesete sva polja..."):function(e){var t=new URLSearchParams;return t.append("name",e.name),t.append("text",e.text),t.append("picture",e.picture),t.append("tags",JSON.stringify(e.tags)),t.append("likes",JSON.stringify(e.likes)),t.append("author",JSON.stringify(e.author)),$(fetch(te,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))}(e).subscribe((function(e){console.log(e),e.valid?(alert(e.message),document.location.reload()):alert(e.message)}))}))}))}function Ge(e,t){var n=document.createElement("div");n.classList.add("divObjavaPocetna"),t.forEach((function(e){Ve(n,e)})),e.appendChild(n)}function Ve(e,t){var n=JSON.parse(sessionStorage.getItem("current-user")),r=document.createElement("div");r.classList.add("divObjava");var o=document.createElement("label");o.innerHTML=t.name,r.appendChild(o);var i=document.createElement("img");i.src=t.picture,i.width=250,i.height=200,r.appendChild(i);var a=document.createElement("label");a.innerHTML=t.text,r.appendChild(a);var u=document.createElement("label");u.innerHTML="<b>Tags:</b>"+t.tags.join(","),r.appendChild(u);var c=document.createElement("label");c.innerHTML="<b>Autor:</b>: "+t.author.email,r.appendChild(c);var l=document.createElement("label");if(l.innerHTML="<b>Likes:</b>"+t.likes.length.toString(),r.appendChild(l),sessionStorage.getItem("current-user")&&t.author.email!==n.email){var s=document.createElement("button");s.innerHTML="Like",s.onclick=function(){var e,r;(e=n.email,r=t._id,$(fetch(ne+"?email="+e+"&oid="+r,{method:"POST"}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))).subscribe((function(e){e.valid?(alert(e.message),document.location.reload()):alert(e.message)}))},r.appendChild(s);var d=document.createElement("button");d.innerHTML="Dislike",d.onclick=function(){var e,r;(e=n.email,r=t._id,$(fetch(re+"?email="+e+"&oid="+r,{method:"POST"}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))).subscribe((function(e){e.valid?(alert(e.message),document.location.reload()):alert(e.message)}))},r.appendChild(d)}if(sessionStorage.getItem("current-user")&&t.author.email===n.email){var p=document.createElement("button");p.innerHTML="Change",p.onclick=function(){var e,n,r;ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),function(e){var t=document.createElement("div");t.classList.add("divPostObjava");var n=document.createElement("div");n.classList.add("divPostObjavaInput");var r=document.createElement("div");r.classList.add("divText");var o=document.createElement("label");o.innerHTML="Text: ",r.appendChild(o);var i=document.createElement("textarea");i.id="objavaText",i.cols=30,i.rows=15,r.appendChild(i),n.appendChild(r);var a=document.createElement("div");a.classList.add("divPicture");var u=document.createElement("label");u.innerHTML="Picture: ",a.appendChild(u);var c=document.createElement("input");c.id="objavaImg",c.type="file",a.appendChild(c),n.appendChild(a),t.appendChild(n);var l=document.createElement("div");l.classList.add("divPostObjavaImg");var s=document.createElement("img");s.width=100,s.height=100,l.appendChild(s),t.appendChild(l);var d=document.createElement("div");d.classList.add("divPostObjavaButton");var p=document.createElement("button");p.classList.add("changeObjavaButton"),p.innerHTML="Change",d.appendChild(p),t.appendChild(d),e.appendChild(t)}(document.querySelector(".middle")),e=t._id,ge(new ie).subscribe((function(e){r=e})),document.querySelector(".changeObjavaButton").addEventListener("click",(function(){""===(n=document.querySelector("#objavaText").value)||""===r?alert("Morate da unesete sva polja..."):function(e,t,n){var r=new URLSearchParams;return r.append("id",e),r.append("text",t),r.append("picture",n),$(fetch(te,{method:"PUT",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:r}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))}(e,n,r).subscribe((function(e){e.valid?(alert(e.message),document.location.reload()):alert(e.message)}))}))},r.appendChild(p);var f=document.createElement("button");f.innerHTML="Delete",f.onclick=function(){var e;(e=t._id,$(fetch(te+"?id="+e,{method:"DELETE"}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))).subscribe((function(e){e.valid?(alert(e.message),document.location.reload()):alert(e.message)}))},r.appendChild(f)}e.appendChild(r)}document.body.onload=function(){var e;Fe(),sessionStorage.getItem("current-user")&&(e=JSON.parse(sessionStorage.getItem("current-user"))),e&&e.tags.length>0?function(e){var t=new URLSearchParams;return t.append("tags",JSON.stringify(e)),$(fetch(te+"?tags=true",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t}).then((function(e){return e.json()})).catch((function(e){return console.log(e)})))}(e.tags).subscribe((function(e){e.valid?(ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),Ge(document.querySelector(".middle"),e.data)):alert(e.message)})):$(fetch(te,{method:"GET"}).then((function(e){return e.json()})).catch((function(e){return console.log(e)}))).subscribe((function(e){e.valid?(ye(document.querySelector(".middle"),document.querySelectorAll(".middle > div")),Ge(document.querySelector(".middle"),e.data)):alert(e.message)})),document.querySelector("a[href='#pocetna']").addEventListener("click",(function(){document.location.reload()})),document.querySelector("a[href='#search-input']").onclick=function(){var e,t;document.querySelector("#search-bar-dropdown-show").classList.toggle("hideDisplay"),e=document.querySelector("#search-bar-dropdown-show"),(t=document.querySelectorAll(".divSearchSingleRecept")).length>0&&t.forEach((function(t){return e.removeChild(t)}))}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,